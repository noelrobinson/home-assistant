###################################
# Solax X1 Hybrid G4 Rest Sensors #
###################################

# Solax Cloud REST
- platform: rest
  scan_interval: 595
  resource: !secret solax_cloud_api
  json_attributes_path: "$.result"
  json_attributes:
    - yieldtoday
    - yieldtotal
    - acpower
    - uploadTime
    - inverterStatus
    - feedinpower
    - feedinenergy
    - consumeenergy
    - soc
    - batPower
    - powerdc1
    - powerdc2
    - batStatus
  value_template: "Active" # dummy value, not used; avoids the "State max length is 255 characters" error
  name: "solax_rest_cloud"

### Solax Local REST sensor ###
- platform: rest
  scan_interval: 60
  resource: !secret solax_local_ip
  payload: !secret solax_local_realtime_payload
  method: POST
  name: "solax_rest_local"
  json_attributes:
    - sn
    - ver
    - type
    - Data
    - Information
  value_template: "OK" # dummy value, not used; avoids the "State max length is 255 characters" error

### Solax Local REST settings ###
- platform: rest
  scan_interval: 3600
  resource: !secret solax_local_ip
  payload: !secret solax_local_settings_payload
  method: POST
  name: "solax_rest_local_settings"
  # Unfortunately settings are not returned as a JSON document but an array of numbers, so having to pick just the relevant to avoid the max 255 chars limit
  # 0 - Self Use Min SOC %
  # 1 - Self Use Charge from grid (0 for disabled, 1 for enabled)
  # 2 - Self Use Charge from grid to %
  # 3 - Forced charge start
  # 4 - Forced charge end
  # 5 - Allowed discharge start
  # 6 - Allowed discharge end
  # 7 - Charge/discharge Period2 Enabled (0 for disabled, 1 for enabled)
  # 8 - Forced charge start (2nd)
  # 9 - Forced charge end (2nd)
  # 10 - Inverter mode - 0: self use, 1: feed in priority, 2: back up, 3: manual
  # 11 - Manual mode behaviour - 0: do nothing, 1: forced charge, 2: forced discharge
  value_template: "{{ '[' ~
    value.split(',')[28] ~ ',' ~
    value.split(',')[29] ~ ',' ~
    value.split(',')[30] ~ ',' ~
    value.split(',')[36] ~ ',' ~
    value.split(',')[37] ~ ',' ~
    value.split(',')[38] ~ ',' ~
    value.split(',')[39] ~ ',' ~
    value.split(',')[40] ~ ',' ~
    value.split(',')[41] ~ ',' ~
    value.split(',')[42] ~ ',' ~
    value.split(',')[27] ~ ',' ~
    value.split(',')[35] ~ ']' }}"

# Smooth out solar forecast as it often gets very choppy
- platform: filter
  name: "filtered upcoming solar forecast"
  unique_id: energy_production_upcoming_filtered
  entity_id: sensor.energy_production_upcoming
  filters:
    - filter: time_simple_moving_average
      window_size: "04:30"
      precision: 2

- platform: filter
  name: "filtered upcoming solar forecast lp"
  unique_id: energy_production_upcoming_filtered_lp
  entity_id: sensor.energy_production_upcoming
  filters:
    - filter: lowpass
      time_constant: 5
      precision: 2

#- platform: average
#  name: 'Ground Floor Temperature 30min Average'
#  entities:
#    - sensor.ground_floor_temperature
#  duration:
#    minutes: 25

#- platform: average
#  name: 'First Floor Temperature Average'
#  entities:
#  - sensor.first_floor_temperature
#  duration:
#    hours: 24

#- platform: average
#  name: 'Outside Temperature Average'
#  entities:
#    - sensor.domek_outdoor_temperature
#  duration:
#    hours: 24

- platform: template
  sensors:
    spa_heat_time:
      unique_id: a189ddea-e8e2-4882-9813-643fe122d92f
      friendly_name: "Spa Heat Time"
      unit_of_measurement: "hours"
      value_template: >-
        {% set initial_temp = state_attr('climate.spa_thermostat','current_temperature')|float %}
        {% set final_temp = state_attr('climate.spa_thermostat','temperature')|float %}
        {% set water_mass = 1550 %}
        {% set heating_power = 3000 %}
        {% set efficiency = 0.9 %}
        {% set delta_t = final_temp - initial_temp %}
        {% set heat_energy = water_mass * 4184 * delta_t %}
        {% set heat_time_hours = heat_energy / (heating_power * efficiency * 3600) %}
        {{ heat_time_hours|round(2) }}

- platform: template
  sensors:
    spa_weather_compensated_setpoint:
      unique_id: 668d0ac4-c6ca-484a-a6c4-2105349d4745
      friendly_name: "Spa Weather Compensated Setpoint"
      unit_of_measurement: "C"
      value_template: >-
        {% set outside_temp = states('sensor.home_realfeel_temperature')|float %}
        {% set temp_20c = 36 %}
        {% set temp_0c = 38 %}
        {% set max_temp = 40 %}
        {% set min_temp = 25 %}
        {% set weather_compensated_setpoint = ((((temp_20c - temp_0c) / 20) * outside_temp) + temp_0c ) | round(1, "half", default) %}
        {{ weather_compensated_setpoint }}

- platform: template
  sensors:
    daily_spa_peak_cost:
      unique_id: bc06f39f-38e0-4d32-9abc-e3c8a9e724bb
      friendly_name: "Daily Spa Peak Cost"
      unit_of_measurement: "£"
      value_template: >-
        {{ states('sensor.daily_spa_peak') | float * states('input_number.electricity_tariff_cost_peak') | float }}

- platform: template
  sensors:
    daily_spa_off_peak_cost:
      unique_id: 394fbe85-fee5-4a5b-a5d0-b055693c9b9b
      friendly_name: "Daily Spa Off Peak Cost"
      unit_of_measurement: "£"
      value_template: >-
        {{ states('sensor.daily_spa_offpeak') | float * states('input_number.electricity_tariff_cost_offpeak') | float }}

- platform: template
  sensors:
    daily_spa_cost:
      unique_id: d4eab574-6fc7-44cf-8054-bb5d1873554f
      friendly_name: "Daily Spa Cost"
      unit_of_measurement: "£"
      value_template: >-
        {{ states('sensor.daily_spa_peak') | float * states('input_number.electricity_tariff_cost_peak') | float + states('sensor.daily_spa_offpeak') | float * states('input_number.electricity_tariff_cost_offpeak') | float }}

- platform: template
  sensors:
    monthly_spa_cost:
      unique_id: 0b5e6965-ff97-4e65-bb61-e07089e29484
      friendly_name: "Monthly Spa Cost"
      unit_of_measurement: "£"
      value_template: >-
        {{ states('sensor.monthly_spa_peak') | float * states('input_number.electricity_tariff_cost_peak') | float + states('sensor.monthly_spa_offpeak') | float * states('input_number.electricity_tariff_cost_offpeak') | float }}

- platform: template
  sensors:
    next_off_peak_rate_start_time:
      unique_id: 60f31dd2-7db9-42ed-a592-3abb8e38d7e4
      friendly_name: "Next Off Peak Start"
      value_template: >-
        {{ state_attr('binary_sensor.octopus_energy_a_7e9f23d1_intelligent_dispatching', 'next_start') }}

- platform: template
  sensors:
    next_off_peak_rate_end_time:
      unique_id: f85d6def-fb51-4064-8052-bb097c2022ba
      friendly_name: "Next Off Peak End"
      value_template: >-
        {{ state_attr('binary_sensor.octopus_energy_a_7e9f23d1_intelligent_dispatching', 'next_end') }}

- platform: template
  sensors:
    current_off_peak_rate_end_time:
      unique_id: 66081380-0668-415c-9c7e-fcb8533c3e52
      friendly_name: "Current Off Peak End"
      value_template: >-
        {{ state_attr('binary_sensor.octopus_energy_a_7e9f23d1_intelligent_dispatching', 'current_end') }}