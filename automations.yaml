# - id: '1672233470659'
#   alias: Sinks - Tesla Charger - Solar start (excess solar)
#   description: ''
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.request_tesla_charger
#       for:
#         hours: 0
#         minutes: 2
#         seconds: 30
#       to: 'on'
#   condition:
#     - condition: time
#       after: 06:00:00
#       before: '22:00:00'
#   action:
#     - type: turn_on
#       device_id: fd52819a40b9e62efed08288a34e51d6
#       entity_id: switch.charger
#       domain: switch
#   mode: single
#- id: '1672237770659'
#  alias: Sinks - Tesla Charger - Solar adjust
#  description: Adjusts the amps used by the charger if house load is too high
#  trigger:
#    - platform: time_pattern
#      seconds: /15
#  condition:
#    - type: is_charging
#      condition: device
#      device_id: fd52819a40b9e62efed08288a34e51d6
#      entity_id: binary_sensor.charging
#      domain: binary_sensor
#  action:
#    - service: number.set_value
#      target:
#        entity_id: number.charging_amps
#      data:
#        value: '{% set load = states(''sensor.solax_local_load_power'')|int %} {% set
#        immAlreadyOn = is_state(''switch.sonoff_1001db22ba'', ''on'')|int(default=0)
#        %} {% set heatingPower = states(''sensor.sonoff_1001db22ba_power'')|float(default=0)
#        %} {% set immAutomationOn = is_state(''automation.sinks_put_3kw_immersion_heater_excess_solar'',
#        ''on'') %} {% set adjust = ((load - 5500) / 240)|float|round(0, ''ceil'',
#        0) %} {% set amps = states(''number.charging_amps'')|int %} {# runs at 2kW
#        (9A) to allow immersion to run at the same time (3kW), with enough room for
#        house load and staying under 5.5kW #} {# if immersion already full, increase
#        to 10A #} {% set maxAmps = 10 if ((immAlreadyOn==true and heatingPower < 1000)
#        or (immAlreadyOn==false and load > 3100) or (immAutomationOn==false)) else
#        9 %} {% set target = amps - adjust if (amps - adjust <= maxAmps) else maxAmps
#        %} {{ target if (target >= 5) else 5 }}'
#  mode: single
# - id: '1634984084830'
#   alias: Sinks - Tesla Charger - Solar stop (low solar)
#   description: ''
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.request_tesla_charger
#       for:
#         hours: 0
#         minutes: 10
#         seconds: 0
#       to: 'off'
#   condition:
#     - condition: time
#       after: 06:00:00
#       before: '22:00:00'
#   action:
#     - type: turn_off
#       device_id: fd52819a40b9e62efed08288a34e51d6
#       entity_id: switch.charger
#       domain: switch
#   mode: single
- id: '12233445566789'
  alias: Sinks - Hot Water - Set   immersion target level
  description: Set target immersion target heating level based on anticipated solar
    production
  trigger:
    - platform: time
      at: '22:45:00'
    - platform: time
      at: '23:45:00'
    - platform: state
      entity_id:
        - input_number.night_min_immersion_target
      for:
        hours: 0
        minutes: 0
        seconds: 15
  condition: []
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.night_immersion_target
        value: "{% set solar = states('sensor.filtered_upcoming_solar_forecast') %}
        {% set todaysSolarTopUp = states('sensor.daily_hot_water_solar')|float %}
        {% set currentTemperature = state_attr('weather.forecast_home', 'temperature')
        %} {% set min_immersion = states('input_number.night_min_immersion_target')|float
        %} {% set weatherAdjustment = 0 %} {% if is_number(currentTemperature) %}\n
        \ {% set weatherAdjustment =  2 if (currentTemperature|float                                   <=
        -3) else weatherAdjustment %}\n  {% set weatherAdjustment =  1 if (currentTemperature|float
        > -3 and currentTemperature|float <=  2) else weatherAdjustment %}\n  {% set
        weatherAdjustment =  0 if (currentTemperature|float >  2 and currentTemperature|float
        <= 12) else weatherAdjustment %}\n  {% set weatherAdjustment = -1 if (currentTemperature|float
        > 12 and currentTemperature|float <= 17) else weatherAdjustment %}\n  {% set
        weatherAdjustment = -2 if (currentTemperature|float > 17)                                    else
        weatherAdjustment %}\n{% endif %} {% set solarThreshold = 12 %} {% set target
        = 8 + weatherAdjustment %} {% if is_number(solar) %}\n  {% set target = target
        - ((solar|float - solarThreshold)*2.5/5)|round(1) if (solar|float >  solarThreshold
        and todaysSolarTopUp > 2.5) else target %}\n{% endif %} {{ target if (target
        > min_immersion) else min_immersion }}\n"
    - delay:
        hours: 0
        minutes: 0
        seconds: 5
        milliseconds: 0
    - service: input_number.set_value
      data_template:
        entity_id: input_number.max_temp_idle_seconds
        value: "{% set immersion = states('input_number.night_immersion_target') %}
        {% set target = 180 %} {% if is_number(immersion) %}\n  {% set target =  30
        if (immersion|float <= 2) else target %}\n  {% set target =  60 if (immersion|float
        >  2 and immersion|float <= 3) else target %}\n  {% set target =  90 if (immersion|float
        >  3 and immersion|float <= 4) else target %}\n  {% set target = 120 if (immersion|float
        >  4 and immersion|float <= 5) else target %}\n  {% set target = 150 if (immersion|float
        >  5 and immersion|float <= 6) else target %}\n  {% set target = 180 if (immersion|float
        >  6 and immersion|float <= 7) else target %}\n  {% set target = 240 if (immersion|float
        >  7 and immersion|float <  8) else target %}\n  {% set target = 300 if (immersion|float
        >= 8) else target %}\n{% endif %} {{ target }}\n"
  mode: single
- id: '1395837280000'
  alias: Battery - Set solar battery target level
  description: Set target battery level (charge from grid) based on anticipated solar
    production
  trigger:
    - platform: time
      at: '23:30:00'
    - platform: time
      at: 04:00:00
    - platform: state
      entity_id:
        - input_number.min_battery_target
        - input_number.max_battery_target
      for:
        hours: 0
        minutes: 0
        seconds: 30
  condition: []
  action:
    - repeat:
        sequence:
          - service: input_number.set_value
            data_template:
              entity_id: input_number.new_battery_target
              value: "{% set min_battery_target = states('input_number.min_battery_target')|int
            %} {% set max_battery_target = states('input_number.max_battery_target')|int
            %} {% set solar = states('sensor.filtered_upcoming_solar_forecast') %}
            {% set morningHourlyLoad = 0.27 %} {# TODO: temperature-dependent heating
            setting 5C (100%); 20C (0%) #} {% set morningHourlyHeating = 0 %} {# Only
            consider time to rising if during the peak hours #} {% set secondsToSunRising
            = 0 if (today_at(as_timestamp(states.sun.sun.attributes.next_rising)|
            timestamp_custom(\"%H:%M\")) < today_at('05:30')) else (today_at(as_timestamp(states.sun.sun.attributes.next_rising)|
            timestamp_custom(\"%H:%M\")) - today_at('05:30')).seconds %} {% set morningDemandKWh
            = (secondsToSunRising/60/60*morningHourlyLoad + morningHourlyHeating*2.5)|round
            %} {% set morningDemand = (morningDemandKWh/5.8*100)|round %} {% set minTarget
            = 10 + morningDemand - 4 %} {% if is_number(solar) %}\n  {% set target
            = max_battery_target  if (solar|float <= 6) else target %}  \n  {% set
            target = minTarget + 70 if (solar|float >  6 and solar|float <=  7) else
            target %}\n  {% set target = minTarget + 55 if (solar|float >  7 and solar|float
            <=  8) else target %}\n  {% set target = minTarget + 40 if (solar|float
            >  8 and solar|float <=  9) else target %}\n  {% set target = minTarget
            + 25 if (solar|float >  9 and solar|float <= 10) else target %}\n  {%
            set target = minTarget + 15 if (solar|float > 10 and solar|float <= 11)
            else target %}\n  {% set target = minTarget + 10 if (solar|float > 11
            and solar|float <= 12) else target %}\n  {% set target = minTarget +  5
            if (solar|float > 12 and solar|float <= 13) else target %}\n  {% set target
            = minTarget      if (solar|float > 13) else target %}\n{% endif %}  {%
            set target = target if (target > min_battery_target) else min_battery_target
            %}  {{ target if (target <= max_battery_target) else max_battery_target
            }}\n"
          - service: rest_command.solax_local_set_charge_battery_from_grid
            data:
              level: '{{ states(''input_number.new_battery_target'') }}

            '
          - delay:
              hours: 0
              minutes: 0
              seconds: 10
              milliseconds: 0
          - service: homeassistant.update_entity
            entity_id: sensor.solax_rest_local_settings
        until:
          - condition: template
            value_template: "{{ states('sensor.solax_local_battery_charge_from_grid_to')|int
          == states('input_number.new_battery_target')|int or\n    repeat.index ==
          3 }}"
  mode: single
- id: '1105783920393'
  alias: Sinks - Hot Water - Start immersion heater (excess solar)
  description: ''
  trigger:
    - platform: state
      entity_id: binary_sensor.request_3kw_immersion
      for:
        hours: 0
        minutes: 1
        seconds: 0
      to: 'on'
  condition:
    - condition: time
      after: 07:00:00
      before: '19:00:00'
  action:
    - repeat:
        sequence:
          - type: turn_on
            device_id: 0d9861537b4b848a34f2356168196e28
            entity_id: switch.sonoff_1001db22ba
            domain: switch
          - delay:
              hours: 0
              minutes: 0
              seconds: 15
        until:
          - condition: template
            value_template: '{{ states(''switch.sonoff_1001db22ba'') == ''on'' or repeat.index
          == 3 }}'
  mode: single
- id: '11991293920222'
  alias: Sinks - Hot Water - Pause immersion heater (temperature reached)
  description: ''
  trigger:
    - platform: numeric_state
      entity_id: sensor.sonoff_1001db22ba_power
      for:
        hours: 0
        minutes: 0
        seconds: 30
      below: 100
  condition:
    - condition: state
      entity_id: switch.sonoff_1001db22ba
      state: 'on'
      for:
        hours: 0
        minutes: 0
        seconds: 30
    - condition: time
      after: 07:30:00
      before: '18:30:00'
  action:
    - service: automation.turn_off
      data:
        stop_actions: true
      target:
        entity_id: automation.sinks_put_3kw_immersion_heater_excess_solar
    - service: switch.turn_off
      data: {}
      target:
        entity_id: switch.sonoff_1001db22ba
    - delay:
        hours: 0
        minutes: 60
        seconds: 0
        milliseconds: 0
    - service: automation.turn_on
      data: {}
      target:
        entity_id: automation.sinks_put_3kw_immersion_heater_excess_solar
  mode: single
- id: '11001293920394'
  alias: Sinks - Hot Water - Run immersion heater (evening top-up in case of low solar)
  description: ''
  trigger:
    - platform: time
      at: '19:35:00'
  condition:
    - condition: template
      value_template: '{{ states(''sensor.daily_hot_water_peak'')|float + states(''sensor.daily_hot_water_solar'')|float
      < states(''input_number.evening_immersion_target'')|float }}'
  action:
    - repeat:
        sequence:
          - type: turn_on
            device_id: 0d9861537b4b848a34f2356168196e28
            entity_id: switch.sonoff_1001db22ba
            domain: switch
          - delay:
              hours: 0
              minutes: 0
              seconds: 15
        until:
          - condition: template
            value_template: '{{ states(''switch.sonoff_1001db22ba'') == ''on'' or repeat.index
          == 3 }}'
    - repeat:
        sequence:
          - delay:
              hours: 0
              minutes: 1
              seconds: 0
        until:
          - condition: template
            value_template: '{{ states(''sensor.daily_hot_water_peak'')|float + states(''sensor.daily_hot_water_solar'')|float
          >= states(''input_number.evening_immersion_target'')|float }}'
    - repeat:
        sequence:
          - type: turn_off
            device_id: 0d9861537b4b848a34f2356168196e28
            entity_id: switch.sonoff_1001db22ba
            domain: switch
          - delay:
              hours: 0
              minutes: 0
              seconds: 15
              milliseconds: 0
        until:
          - condition: template
            value_template: '{{ states(''switch.sonoff_1001db22ba'') == ''off'' or repeat.index
          == 3 }}'
  mode: single
- id: '1105783920394'
  alias: Sinks - Hot Water - Start immersion heater (night start)
  description: ''
  trigger:
    - platform: time
      at: 01:35:00
    - platform: time
      at: 02:35:00
    - platform: time
      at: 03:35:00
    - platform: time
      at: 04:35:00
  condition:
    - condition: template
      value_template: '{{ states(''sensor.daily_hot_water_offpeak'')|float < states(''input_number.night_immersion_target'')|float
      }}'
  action:
    - repeat:
        sequence:
          - type: turn_on
            device_id: 0d9861537b4b848a34f2356168196e28
            entity_id: switch.sonoff_1001db22ba
            domain: switch
          - delay:
              hours: 0
              minutes: 0
              seconds: 15
        until:
          - condition: template
            value_template: '{{ states(''switch.sonoff_1001db22ba'') == ''on'' or repeat.index
          == 3 }}'
  mode: single
- id: '1029486719232'
  alias: Sinks - Hot Water - Stop immersion heater (max temp idle time or night target
    reached)
  description: Turn off completely if thermostat starts turning off the heating (hot
    enough) or target achieved
  trigger:
    - platform: numeric_state
      entity_id: sensor.sonoff_1001db22ba_power
      for:
        seconds: '{{ states(''input_number.max_temp_idle_seconds'')|int }}'
      below: 1000
    - platform: template
      value_template: '{{ states(''sensor.daily_hot_water_offpeak'')|float >= states(''input_number.night_immersion_target'')|float
      }}'
  condition:
    - condition: time
      after: 00:30:00
      before: 05:30:00
  action:
    - repeat:
        sequence:
          - type: turn_off
            device_id: 0d9861537b4b848a34f2356168196e28
            entity_id: switch.sonoff_1001db22ba
            domain: switch
          - delay:
              hours: 0
              minutes: 0
              seconds: 15
              milliseconds: 0
        until:
          - condition: template
            value_template: '{{ states(''switch.sonoff_1001db22ba'') == ''off'' or repeat.index
          == 3 }}'
  mode: single
- id: '1283957837432'
  alias: Sinks - Hot Water - Stop immersion heater (low solar or night end)
  description: ''
  trigger:
    - platform: state
      entity_id: binary_sensor.request_3kw_immersion
      for:
        hours: 0
        minutes: 0
        seconds: 45
      to: 'off'
    - platform: time
      at: 02:25:00
    - platform: time
      at: 03:25:00
    - platform: time
      at: 04:25:00
    - platform: time
      at: 05:25:00
    - platform: time
      at: '19:15:00'
  condition:
    - condition: time
      after: 02:15:00
      before: '19:15:00'
  action:
    - repeat:
        sequence:
          - type: turn_off
            device_id: 0d9861537b4b848a34f2356168196e28
            entity_id: switch.sonoff_1001db22ba
            domain: switch
          - delay:
              hours: 0
              minutes: 0
              seconds: 15
        until:
          - condition: template
            value_template: '{{ states(''switch.sonoff_1001db22ba'') == ''off'' or repeat.index
          == 3 }}'
  mode: single
- id: '1143938438939'
  alias: Battery - Disable forced charge
  description: Allows for discharge if too much energy stored from previous day (default
    state)
  trigger:
    - platform: time
      at: '23:40:00'
    - platform: time
      at: '23:50:00'
  action:
    - repeat:
        sequence:
          - service: rest_command.solax_local_set_forced_charge_start
            data:
              value: '{{ 5 + 25 * 256 }}

            '
          - delay:
              hours: 0
              minutes: 0
              seconds: 15
              milliseconds: 0
          - service: homeassistant.update_entity
            entity_id: sensor.solax_rest_local_settings
        until:
          - condition: template
            value_template: '{{ states(''sensor.solax_local_battery_setting_start_charge'')
          == ''05:25'' or repeat.index == 3 }}'
  mode: single

- id: '1029376657476'
  alias: Battery - Enable forced charge
  description: Stops allowed discharge and allows for charging to target
  trigger:
    - platform: time_pattern
      minutes: /1
  condition:
#    - condition: time
#      after: 00:01:00
#      before: 05:20:00
    - condition: state
      entity_id: binary_sensor.octopus_intelligent_slot
      state: 'on'
      for:
        hours: 0
        minutes: 0
        seconds: 30
    - condition: template
      value_template: '{{ states(''sensor.solax_local_battery_soc'')|int <= states(''sensor.solax_local_battery_charge_from_grid_to'')|int
      + 8 }}'
  action:
    - repeat:
        sequence:
          - service: rest_command.solax_local_set_forced_charge_start
            data:
#              hour = as_timestamp(sensor.octopus_intelligent_next_offpeak_start)|timestamp_custom ('%H')
#              minute = as_timestamp(sensor.octopus_intelligent_next_offpeak_start)|timestamp_custom ('%M')
#              value: '{{ 0 + 5 * 256 }}'
              value: "{% set hour = as_timestamp(states('sensor.octopus_intelligent_next_offpeak_start'))|timestamp_custom ('%H')|int %}
              {% set minute = as_timestamp(states('sensor.octopus_intelligent_next_offpeak_start'))|timestamp_custom ('%M')|int %}
              '{{ (hour + minute) * 256 }}'"
          - delay:
              hours: 0
              minutes: 0
              seconds: 15
              milliseconds: 0
          - service: homeassistant.update_entity
            entity_id: sensor.solax_rest_local_settings
        until:
          - condition: template
            value_template: "{{ states('sensor.solax_local_battery_setting_start_charge')
          == as_timestamp(states('sensor.octopus_intelligent_next_offpeak_start'))|timestamp_custom ('%H:%M') or repeat.index == 3 }}"
  mode: single

- id: '1302984839333'
  alias: Tariffs - Set 'solar' tariff for tracking usage from PV
  description: Set some meters to use 'solar' tariff
  trigger:
    - platform: sun
      event: sunrise
      offset: 0
      variables:
        tariff: '{{ "solar" if today_at(''05:30'') <= now() else "offpeak" }}'
    - platform: sun
      event: sunset
      offset: 0
      variables:
        tariff: peak
    - platform: time
      at: '23:30:00'
      variables:
        tariff: offpeak
    - platform: time
      at: 05:30:00
      variables:
        tariff: '{{ "peak" if (is_state(''sun.sun'', "below_horizon")) else "solar"
        }}'
  action:
    - service: select.select_option
      target:
        entity_id: select.monthly_hot_water
      data:
        option: '{{ tariff }}'
    - service: select.select_option
      target:
        entity_id: select.daily_hot_water
      data:
        option: '{{ tariff }}'
    - service: select.select_option
      target:
        entity_id: select.daily_tesla_charging
      data:
        option: '{{ tariff }}'
    - service: select.select_option
      target:
        entity_id: select.monthly_tesla_charging
      data:
        option: '{{ tariff }}'

- id: '1302984839203'
  alias: Tariffs - Switch electricity tariff
  description: Set electricity tariff for utility sensor
  variables:
    tariff: offpeak
  trigger:
    - type: turned_on
      platform: device
      device_id: fe4e6403b07c3862ffee15a68572ba9d
      entity_id: binary_sensor.octopus_intelligent_slot
      domain: binary_sensor
      variables:
        tariff: offpeak
    - type: turned_off
      platform: device
      device_id: fe4e6403b07c3862ffee15a68572ba9d
      entity_id: binary_sensor.octopus_intelligent_slot
      domain: binary_sensor
      variables:
        tariff: peak
    - platform: time
      at: '23:30:00'
      variables:
        tariff: offpeak
    - platform: time
      at: 05:30:00
      variables:
        tariff: peak
  condition: []
  action:
    - service: select.select_option
      target:
        entity_id: select.daily_grid
      data:
        option: '{{ tariff }}'
    - service: select.select_option
      target:
        entity_id: select.monthly_grid
      data:
        option: '{{ tariff }}'
    - service: input_number.set_value
      target:
        entity_id: input_number.electricity_tariff_cost
      data:
        value: '{% set cost = dict(peak=0.3060, offpeak=0.075) %} {{ cost[tariff] }}'
  mode: single
- id: '1019847854392'
  alias: Inverter - Refresh local energy readings
  description: Updates local inverter readings
  trigger:
    - platform: time_pattern
      seconds: /10
  condition:
    - condition: time
      after: 06:00:00
      before: '22:00:00'
  action:
    - service: homeassistant.update_entity
      entity_id: sensor.solax_rest_local
  mode: single
- id: '1693997255329'
  alias: Close gates @ 23:31 Every Night
  description: ''
  trigger:
    - platform: time
      at: '23:31:00'
  condition: []
  action:
    - type: turn_on
      device_id: f026eddf710c85a131f11c071f912d81
      entity_id: 6bcc6e79f9145622d02e31a5704f1199
      domain: switch
  mode: single

- id: '1693997255330'
  alias: Alert Octopus Intelligent Change
  description: >-
    Notify everyone if the cheap window starts or stops, and send the timings of
    upcoming charges.
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.octopus_intelligent_slot
      from: "off"
      to: "on"
      id: "on"
      for:
        hours: 0
        minutes: 0
        seconds: 30
    - platform: state
      entity_id:
        - binary_sensor.octopus_intelligent_slot
      from: "on"
      to: "off"
      id: "off"
      for:
        hours: 0
        minutes: 1
        seconds: 0
  condition: [ ]
  action:
    - if:
        - condition: trigger
          id: "on"
      then:
        - service: notify.mobile_app_sm_s908b
          data:
            title: Off-Peak Electricity Rate!
            message: >-
              {% set plannedDispatches =
              state_attr('binary_sensor.octopus_intelligent_slot',
              'plannedDispatches') %} {% set cheapNow =
              states("binary_sensor.octopus_intelligent_slot") == 'on' %} {% set
              pence = states('input_number.electricity_tariff_cost') %}
              {% if cheapNow %} Electricity is currently cheap 🔥 {{ pence }}p/kWh
              {% else %} Electricity is currently expensive 🔥🔥🔥 {{ pence
              }}p/kWh {% endif %}

              {% if (plannedDispatches | length) == 0 %} No additional slots are
              scheduled yet today. 😢

              Use 23:30 - 05:30 only. {% else %} There are {{ plannedDispatches |
              length }} upcoming slots for {{
              as_timestamp(plannedDispatches[0].startDtUtc)|timestamp_custom
              ('%Y/%m/%d')}}.

              {% for item in plannedDispatches %} {{
              as_timestamp(item.startDtUtc)|timestamp_custom ('%H:%M') }} - {{
              as_timestamp(item.endDtUtc)|timestamp_custom ('%H:%M') }}

              {%- endfor%} {% endif %}
      else:
        - service: notify.mobile_app_sm_s908b
          data:
            title: Peak Electricity Rate!
            message: >-
              {% set plannedDispatches =
              state_attr('binary_sensor.octopus_intelligent_slot',
              'plannedDispatches') %} {% set cheapNow =
              states("binary_sensor.octopus_intelligent_slot") == 'on' %} {% set
              pence = states('input_number.electricity_tariff_cost') %}
              {% if cheapNow %} Electricity is currently cheap 🔥 {{ pence }}p/kWh
              {% else %} Electricity is currently expensive 🔥🔥🔥 {{ pence
              }}p/kWh {% endif %}

              {% if (plannedDispatches | length) == 0 %} No additional slots are
              scheduled yet today. 😢

              Use 23:30 - 05:30 only. {% else %} There are {{ plannedDispatches |
              length }} upcoming slots for {{
              as_timestamp(plannedDispatches[0].startDtUtc)|timestamp_custom
              ('%Y/%m/%d')}}.

              {% for item in plannedDispatches %} {{
              as_timestamp(item.startDtUtc)|timestamp_custom ('%H:%M') }} - {{
              as_timestamp(item.endDtUtc)|timestamp_custom ('%H:%M') }}

              {%- endfor%} {% endif %}
  mode: single
